// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Room.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// ignore_for_file:
// BEGIN TABLES
// Room TABLE
class TableRoom extends SqfEntityTableBase {
  TableRoom() {
    // declare properties of EntityTable
    tableName = 'rooms';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('iconPath', DbType.text, isNotNull: false),
      SqfEntityFieldBase('headerImagePath', DbType.text, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableRoom();
  }
}

// Bundle TABLE
class TableBundle extends SqfEntityTableBase {
  TableBundle() {
    // declare properties of EntityTable
    tableName = 'bundles';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('iconPath', DbType.text, isNotNull: false),
      SqfEntityFieldBase('headerImagePath', DbType.text, isNotNull: false),
      SqfEntityFieldRelationshipBase(
          TableRoom.getInstance, DeleteRule.NO_ACTION,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'room',
          isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableBundle();
  }
}

// Item TABLE
class TableItem extends SqfEntityTableBase {
  TableItem() {
    // declare properties of EntityTable
    tableName = 'items';
    relationType = RelationType.ONE_TO_MANY;
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('iconPath', DbType.text, isNotNull: true),
      SqfEntityFieldBase('complete', DbType.bool,
          defaultValue: false, isNotNull: false),
      SqfEntityFieldRelationshipBase(
          TableBundle.getInstance, DeleteRule.NO_ACTION,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'bundle',
          isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableItem();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class DatabaseModel extends SqfEntityModelProvider {
  DatabaseModel() {
    databaseName = databaseModel.databaseName;
    password = databaseModel.password;
    dbVersion = databaseModel.dbVersion;
    databaseTables = [
      TableRoom.getInstance,
      TableBundle.getInstance,
      TableItem.getInstance,
    ];

    bundledDatabasePath = databaseModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Room
class Room {
  Room({this.id, this.name, this.iconPath, this.headerImagePath}) {
    _setDefaultValues();
  }
  Room.withFields(this.name, this.iconPath, this.headerImagePath) {
    _setDefaultValues();
  }
  Room.withId(this.id, this.name, this.iconPath, this.headerImagePath) {
    _setDefaultValues();
  }
  Room.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'] as String;
    }
    if (o['iconPath'] != null) {
      iconPath = o['iconPath'] as String;
    }
    if (o['headerImagePath'] != null) {
      headerImagePath = o['headerImagePath'] as String;
    }
  }
  // FIELDS (Room)
  int id;
  String name;
  String iconPath;
  String headerImagePath;

  BoolResult saveResult;
  // end FIELDS (Room)

// COLLECTIONS & VIRTUALS (Room)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plBundles', 'plField2'..]) or so on..
  List<Bundle> plBundles;

  /// get Bundle(s) filtered by id=room
  BundleFilterBuilder getBundles(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Bundle()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .room
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Room)

  static const bool _softDeleteActivated = false;
  RoomManager __mnRoom;

  RoomManager get _mnRoom {
    return __mnRoom = __mnRoom ?? RoomManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (iconPath != null) {
      map['iconPath'] = iconPath;
    }

    if (headerImagePath != null) {
      map['headerImagePath'] = headerImagePath;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (iconPath != null) {
      map['iconPath'] = iconPath;
    }

    if (headerImagePath != null) {
      map['headerImagePath'] = headerImagePath;
    }

// COLLECTIONS (Room)
    if (!forQuery) {
      map['Bundles'] = await getBundles().toMapList();
    }
// END COLLECTIONS (Room)

    return map;
  }

  /// This method returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [name, iconPath, headerImagePath];
  }

  List<dynamic> toArgsWithIds() {
    return [id, name, iconPath, headerImagePath];
  }

  static Future<List<Room>> fromWeb(
      [VoidCallback Function(List<Room> o) roomList]) async {
    final objList = await fromWebUrl(
        'https://raw.githubusercontent.com/PikaPirate/stardew-valley-tracker/master/Rooms.json');
    if (roomList != null) {
      roomList(objList);
    }
    return objList;
  }

  static Future<List<Room>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Room.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Room>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Room>[];
    try {
      objList = list
          .map((room) => Room.fromMap(room as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Room.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Room>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Room> objList = <Room>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Room.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('rooms.plBundles') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBundles'))) {
          /*_loadedFields.add('rooms.plBundles'); */
          obj.plBundles = obj.plBundles ??
              await obj.getBundles().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Room by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Room if exist, otherwise returns null
  Future<Room> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Room obj;
    final data = await _mnRoom.getById([id]);
    if (data.length != 0) {
      obj = Room.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('rooms.plBundles') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBundles'))) {
          /*_loadedFields.add('rooms.plBundles'); */
          obj.plBundles = obj.plBundles ??
              await obj.getBundles().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Room) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnRoom.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnRoom.update(this);
    }

    return id;
  }

  /// saveAs Room. Returns a new Primary Key value of Room

  /// <returns>Returns a new Primary Key value of Room
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Room> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  Future<List<dynamic>> saveAll(List<Room> rooms) async {
    // final results = _mnRoom.saveAll('INSERT OR REPLACE INTO rooms (id,name, iconPath, headerImagePath)  VALUES (?,?,?,?)',rooms);
    // return results; removed in sqfentity_gen 1.3.0+6
    DatabaseModel().batchStart();
    for (final obj in rooms) {
      await obj.save();
    }
    return DatabaseModel().batchCommit();
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnRoom.rawInsert(
              'INSERT OR REPLACE INTO rooms (id,name, iconPath, headerImagePath)  VALUES (?,?,?,?)',
              [id, name, iconPath, headerImagePath]) ==
          1) {
        saveResult = BoolResult(
            success: true, successMessage: 'Room id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Room id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Room Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Room>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Room> rooms) async {
    final results = await _mnRoom.rawInsertAll(
        'INSERT OR REPLACE INTO rooms (id,name, iconPath, headerImagePath)  VALUES (?,?,?,?)',
        rooms);
    return results;
  }

  /// Deletes Room

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Room invoked (id=$id)');
    if (await Bundle().select().room.equals(id).and.toCount() > 0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (Bundle.room)');
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnRoom
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnRoom.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  RoomFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    return RoomFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  RoomFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return RoomFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion room

// region RoomField
class RoomField extends SearchCriteria {
  RoomField(this.roomFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  RoomFilterBuilder roomFB;

  RoomField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  RoomFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    roomFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, roomFB.parameters, param, SqlSyntax.EQuals,
            roomFB._addedBlocks)
        : setCriteria(pValue, roomFB.parameters, param, SqlSyntax.NotEQuals,
            roomFB._addedBlocks);
    _waitingNot = '';
    roomFB._addedBlocks.needEndBlock[roomFB._blockIndex] =
        roomFB._addedBlocks.retVal;
    return roomFB;
  }

  RoomFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    roomFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, roomFB.parameters, param, SqlSyntax.EQualsOrNull,
            roomFB._addedBlocks)
        : setCriteria(pValue, roomFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, roomFB._addedBlocks);
    _waitingNot = '';
    roomFB._addedBlocks.needEndBlock[roomFB._blockIndex] =
        roomFB._addedBlocks.retVal;
    return roomFB;
  }

  RoomFilterBuilder isNull() {
    roomFB._addedBlocks = setCriteria(
        0,
        roomFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        roomFB._addedBlocks);
    _waitingNot = '';
    roomFB._addedBlocks.needEndBlock[roomFB._blockIndex] =
        roomFB._addedBlocks.retVal;
    return roomFB;
  }

  RoomFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      roomFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          roomFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          roomFB._addedBlocks);
      _waitingNot = '';
      roomFB._addedBlocks.needEndBlock[roomFB._blockIndex] =
          roomFB._addedBlocks.retVal;
    }
    return roomFB;
  }

  RoomFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      roomFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          roomFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          roomFB._addedBlocks);
      _waitingNot = '';
      roomFB._addedBlocks.needEndBlock[roomFB._blockIndex] =
          roomFB._addedBlocks.retVal;
      roomFB._addedBlocks.needEndBlock[roomFB._blockIndex] =
          roomFB._addedBlocks.retVal;
    }
    return roomFB;
  }

  RoomFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      roomFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          roomFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          roomFB._addedBlocks);
      _waitingNot = '';
      roomFB._addedBlocks.needEndBlock[roomFB._blockIndex] =
          roomFB._addedBlocks.retVal;
    }
    return roomFB;
  }

  RoomFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      roomFB._addedBlocks = setCriteria(
          pFirst,
          roomFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          roomFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        roomFB._addedBlocks = setCriteria(pFirst, roomFB.parameters, param,
            SqlSyntax.LessThan, roomFB._addedBlocks);
      } else {
        roomFB._addedBlocks = setCriteria(pFirst, roomFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, roomFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        roomFB._addedBlocks = setCriteria(pLast, roomFB.parameters, param,
            SqlSyntax.GreaterThan, roomFB._addedBlocks);
      } else {
        roomFB._addedBlocks = setCriteria(pLast, roomFB.parameters, param,
            SqlSyntax.LessThanOrEquals, roomFB._addedBlocks);
      }
    }
    _waitingNot = '';
    roomFB._addedBlocks.needEndBlock[roomFB._blockIndex] =
        roomFB._addedBlocks.retVal;
    return roomFB;
  }

  RoomFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    roomFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, roomFB.parameters, param, SqlSyntax.GreaterThan,
            roomFB._addedBlocks)
        : setCriteria(pValue, roomFB.parameters, param,
            SqlSyntax.LessThanOrEquals, roomFB._addedBlocks);
    _waitingNot = '';
    roomFB._addedBlocks.needEndBlock[roomFB._blockIndex] =
        roomFB._addedBlocks.retVal;
    return roomFB;
  }

  RoomFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    roomFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, roomFB.parameters, param, SqlSyntax.LessThan,
            roomFB._addedBlocks)
        : setCriteria(pValue, roomFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, roomFB._addedBlocks);
    _waitingNot = '';
    roomFB._addedBlocks.needEndBlock[roomFB._blockIndex] =
        roomFB._addedBlocks.retVal;
    return roomFB;
  }

  RoomFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    roomFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, roomFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, roomFB._addedBlocks)
        : setCriteria(pValue, roomFB.parameters, param, SqlSyntax.LessThan,
            roomFB._addedBlocks);
    _waitingNot = '';
    roomFB._addedBlocks.needEndBlock[roomFB._blockIndex] =
        roomFB._addedBlocks.retVal;
    return roomFB;
  }

  RoomFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    roomFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, roomFB.parameters, param,
            SqlSyntax.LessThanOrEquals, roomFB._addedBlocks)
        : setCriteria(pValue, roomFB.parameters, param, SqlSyntax.GreaterThan,
            roomFB._addedBlocks);
    _waitingNot = '';
    roomFB._addedBlocks.needEndBlock[roomFB._blockIndex] =
        roomFB._addedBlocks.retVal;
    return roomFB;
  }

  RoomFilterBuilder inValues(dynamic pValue) {
    roomFB._addedBlocks = setCriteria(
        pValue,
        roomFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        roomFB._addedBlocks);
    _waitingNot = '';
    roomFB._addedBlocks.needEndBlock[roomFB._blockIndex] =
        roomFB._addedBlocks.retVal;
    return roomFB;
  }
}
// endregion RoomField

// region RoomFilterBuilder
class RoomFilterBuilder extends SearchCriteria {
  RoomFilterBuilder(Room obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Room _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  RoomFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  RoomFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  RoomFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  RoomFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param =
          DbParameter(columnName: parameterValue == null ? null : '');
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  RoomFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  RoomFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  RoomFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  RoomFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  RoomFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  RoomFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  RoomField setField(RoomField field, String colName, DbType dbtype) {
    return RoomField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  RoomField _id;
  RoomField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  RoomField _name;
  RoomField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  RoomField _iconPath;
  RoomField get iconPath {
    return _iconPath = setField(_iconPath, 'iconPath', DbType.text);
  }

  RoomField _headerImagePath;
  RoomField get headerImagePath {
    return _headerImagePath =
        setField(_headerImagePath, 'headerImagePath', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Room._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Room> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    // Check sub records where in (Bundle) according to DeleteRule.NO_ACTION
    final bundlesByroomidList = await toListPrimaryKey(false);
    final resBundleBYroom =
        await Bundle().select().room.inValues(bundlesByroomidList).toCount();
    if (resBundleBYroom > 0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (Bundle.room)');
    }

    if (Room._softDeleteActivated && !hardDelete) {
      r = await _obj._mnRoom.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnRoom.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from rooms ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnRoom.updateBatch(qparams, values);
  }

  /// This method always returns Room Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Room>
  Future<Room> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnRoom.toList(qparams);
    final data = await objFuture;
    Room obj;
    if (data.isNotEmpty) {
      obj = Room.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('rooms.plBundles') && */ (preloadFields ==
                null ||
            preloadFields.contains('plBundles'))) {
          /*_loadedFields.add('rooms.plBundles'); */
          obj.plBundles = obj.plBundles ??
              await obj.getBundles().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) roomCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final roomsFuture = await _obj._mnRoom.toList(qparams);
    final int count = roomsFuture[0]['CNT'] as int;
    if (roomCount != null) {
      roomCount(count);
    }
    return count;
  }

  /// This method returns List<Room>.
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Room>
  Future<List<Room>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Room> roomsData = await Room.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return roomsData;
  }

  /// This method returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnRoom.toList(qparams);
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnRoom.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnRoom.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Room.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnRoom.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion RoomFilterBuilder

// region RoomFields
class RoomFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fIconPath;
  static TableField get iconPath {
    return _fIconPath =
        _fIconPath ?? SqlSyntax.setField(_fIconPath, 'iconPath', DbType.text);
  }

  static TableField _fHeaderImagePath;
  static TableField get headerImagePath {
    return _fHeaderImagePath = _fHeaderImagePath ??
        SqlSyntax.setField(_fHeaderImagePath, 'headerImagePath', DbType.text);
  }
}
// endregion RoomFields

//region RoomManager
class RoomManager extends SqfEntityProvider {
  RoomManager()
      : super(DatabaseModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'rooms';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion RoomManager
// region Bundle
class Bundle {
  Bundle({this.id, this.name, this.iconPath, this.headerImagePath, this.room}) {
    _setDefaultValues();
  }
  Bundle.withFields(this.name, this.iconPath, this.headerImagePath, this.room) {
    _setDefaultValues();
  }
  Bundle.withId(
      this.id, this.name, this.iconPath, this.headerImagePath, this.room) {
    _setDefaultValues();
  }
  Bundle.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'] as String;
    }
    if (o['iconPath'] != null) {
      iconPath = o['iconPath'] as String;
    }
    if (o['headerImagePath'] != null) {
      headerImagePath = o['headerImagePath'] as String;
    }
    room = int.tryParse(o['room'].toString());

    // RELATIONSHIPS FromMAP
    plRoom = o['plRoom'] != null
        ? Room.fromMap(o['plRoom'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Bundle)
  int id;
  String name;
  String iconPath;
  String headerImagePath;
  int room;

  BoolResult saveResult;
  // end FIELDS (Bundle)

// RELATIONSHIPS (Bundle)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plRoom', 'plField2'..]) or so on..
  Room plRoom;

  /// get Room By Room
  Future<Room> getRoom(
      {bool loadParents = false, List<String> loadedFields}) async {
    final _obj = await Room()
        .getById(room, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Bundle)

// COLLECTIONS & VIRTUALS (Bundle)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plItems', 'plField2'..]) or so on..
  List<Item> plItems;

  /// get Item(s) filtered by id=bundle
  ItemFilterBuilder getItems(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Item()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .bundle
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Bundle)

  static const bool _softDeleteActivated = false;
  BundleManager __mnBundle;

  BundleManager get _mnBundle {
    return __mnBundle = __mnBundle ?? BundleManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (iconPath != null) {
      map['iconPath'] = iconPath;
    }

    if (headerImagePath != null) {
      map['headerImagePath'] = headerImagePath;
    }

    if (room != null) {
      map['room'] = forView ? plRoom.name : room;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (iconPath != null) {
      map['iconPath'] = iconPath;
    }

    if (headerImagePath != null) {
      map['headerImagePath'] = headerImagePath;
    }

    if (room != null) {
      map['room'] = forView ? plRoom.name : room;
    }

// COLLECTIONS (Bundle)
    if (!forQuery) {
      map['Items'] = await getItems().toMapList();
    }
// END COLLECTIONS (Bundle)

    return map;
  }

  /// This method returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [name, iconPath, headerImagePath, room];
  }

  List<dynamic> toArgsWithIds() {
    return [id, name, iconPath, headerImagePath, room];
  }

  static Future<List<Bundle>> fromWeb(
      [VoidCallback Function(List<Bundle> o) bundleList]) async {
    final objList = await fromWebUrl(
        'https://raw.githubusercontent.com/PikaPirate/stardew-valley-tracker/master/Bundles.json');
    if (bundleList != null) {
      bundleList(objList);
    }
    return objList;
  }

  static Future<List<Bundle>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Bundle.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Bundle>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Bundle>[];
    try {
      objList = list
          .map((bundle) => Bundle.fromMap(bundle as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Bundle.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Bundle>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Bundle> objList = <Bundle>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Bundle.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('bundles.plItems') && */ (preloadFields ==
                null ||
            preloadFields.contains('plItems'))) {
          /*_loadedFields.add('bundles.plItems'); */
          obj.plItems = obj.plItems ??
              await obj.getItems().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('rooms.plRoom') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plRoom'))) {
          /*_loadedFields.add('rooms.plRoom');*/
          obj.plRoom = obj.plRoom ??
              await obj.getRoom(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Bundle by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Bundle if exist, otherwise returns null
  Future<Bundle> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Bundle obj;
    final data = await _mnBundle.getById([id]);
    if (data.length != 0) {
      obj = Bundle.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('bundles.plItems') && */ (preloadFields ==
                null ||
            preloadFields.contains('plItems'))) {
          /*_loadedFields.add('bundles.plItems'); */
          obj.plItems = obj.plItems ??
              await obj.getItems().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('rooms.plRoom') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plRoom'))) {
          /*_loadedFields.add('rooms.plRoom');*/
          obj.plRoom = obj.plRoom ??
              await obj.getRoom(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Bundle) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnBundle.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnBundle.update(this);
    }

    return id;
  }

  /// saveAs Bundle. Returns a new Primary Key value of Bundle

  /// <returns>Returns a new Primary Key value of Bundle
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Bundle> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  Future<List<dynamic>> saveAll(List<Bundle> bundles) async {
    // final results = _mnBundle.saveAll('INSERT OR REPLACE INTO bundles (id,name, iconPath, headerImagePath, room)  VALUES (?,?,?,?,?)',bundles);
    // return results; removed in sqfentity_gen 1.3.0+6
    DatabaseModel().batchStart();
    for (final obj in bundles) {
      await obj.save();
    }
    return DatabaseModel().batchCommit();
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnBundle.rawInsert(
              'INSERT OR REPLACE INTO bundles (id,name, iconPath, headerImagePath, room)  VALUES (?,?,?,?,?)',
              [id, name, iconPath, headerImagePath, room]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Bundle id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Bundle id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Bundle Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Bundle>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Bundle> bundles) async {
    final results = await _mnBundle.rawInsertAll(
        'INSERT OR REPLACE INTO bundles (id,name, iconPath, headerImagePath, room)  VALUES (?,?,?,?,?)',
        bundles);
    return results;
  }

  /// Deletes Bundle

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Bundle invoked (id=$id)');
    if (await Item().select().bundle.equals(id).and.toCount() > 0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (Item.bundle)');
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnBundle
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnBundle.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  BundleFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return BundleFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  BundleFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return BundleFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion bundle

// region BundleField
class BundleField extends SearchCriteria {
  BundleField(this.bundleFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  BundleFilterBuilder bundleFB;

  BundleField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  BundleFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    bundleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bundleFB.parameters, param, SqlSyntax.EQuals,
            bundleFB._addedBlocks)
        : setCriteria(pValue, bundleFB.parameters, param, SqlSyntax.NotEQuals,
            bundleFB._addedBlocks);
    _waitingNot = '';
    bundleFB._addedBlocks.needEndBlock[bundleFB._blockIndex] =
        bundleFB._addedBlocks.retVal;
    return bundleFB;
  }

  BundleFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    bundleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bundleFB.parameters, param,
            SqlSyntax.EQualsOrNull, bundleFB._addedBlocks)
        : setCriteria(pValue, bundleFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, bundleFB._addedBlocks);
    _waitingNot = '';
    bundleFB._addedBlocks.needEndBlock[bundleFB._blockIndex] =
        bundleFB._addedBlocks.retVal;
    return bundleFB;
  }

  BundleFilterBuilder isNull() {
    bundleFB._addedBlocks = setCriteria(
        0,
        bundleFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        bundleFB._addedBlocks);
    _waitingNot = '';
    bundleFB._addedBlocks.needEndBlock[bundleFB._blockIndex] =
        bundleFB._addedBlocks.retVal;
    return bundleFB;
  }

  BundleFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      bundleFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          bundleFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bundleFB._addedBlocks);
      _waitingNot = '';
      bundleFB._addedBlocks.needEndBlock[bundleFB._blockIndex] =
          bundleFB._addedBlocks.retVal;
    }
    return bundleFB;
  }

  BundleFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      bundleFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          bundleFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bundleFB._addedBlocks);
      _waitingNot = '';
      bundleFB._addedBlocks.needEndBlock[bundleFB._blockIndex] =
          bundleFB._addedBlocks.retVal;
      bundleFB._addedBlocks.needEndBlock[bundleFB._blockIndex] =
          bundleFB._addedBlocks.retVal;
    }
    return bundleFB;
  }

  BundleFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      bundleFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          bundleFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bundleFB._addedBlocks);
      _waitingNot = '';
      bundleFB._addedBlocks.needEndBlock[bundleFB._blockIndex] =
          bundleFB._addedBlocks.retVal;
    }
    return bundleFB;
  }

  BundleFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      bundleFB._addedBlocks = setCriteria(
          pFirst,
          bundleFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bundleFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        bundleFB._addedBlocks = setCriteria(pFirst, bundleFB.parameters, param,
            SqlSyntax.LessThan, bundleFB._addedBlocks);
      } else {
        bundleFB._addedBlocks = setCriteria(pFirst, bundleFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, bundleFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        bundleFB._addedBlocks = setCriteria(pLast, bundleFB.parameters, param,
            SqlSyntax.GreaterThan, bundleFB._addedBlocks);
      } else {
        bundleFB._addedBlocks = setCriteria(pLast, bundleFB.parameters, param,
            SqlSyntax.LessThanOrEquals, bundleFB._addedBlocks);
      }
    }
    _waitingNot = '';
    bundleFB._addedBlocks.needEndBlock[bundleFB._blockIndex] =
        bundleFB._addedBlocks.retVal;
    return bundleFB;
  }

  BundleFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    bundleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bundleFB.parameters, param, SqlSyntax.GreaterThan,
            bundleFB._addedBlocks)
        : setCriteria(pValue, bundleFB.parameters, param,
            SqlSyntax.LessThanOrEquals, bundleFB._addedBlocks);
    _waitingNot = '';
    bundleFB._addedBlocks.needEndBlock[bundleFB._blockIndex] =
        bundleFB._addedBlocks.retVal;
    return bundleFB;
  }

  BundleFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    bundleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bundleFB.parameters, param, SqlSyntax.LessThan,
            bundleFB._addedBlocks)
        : setCriteria(pValue, bundleFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, bundleFB._addedBlocks);
    _waitingNot = '';
    bundleFB._addedBlocks.needEndBlock[bundleFB._blockIndex] =
        bundleFB._addedBlocks.retVal;
    return bundleFB;
  }

  BundleFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    bundleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bundleFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, bundleFB._addedBlocks)
        : setCriteria(pValue, bundleFB.parameters, param, SqlSyntax.LessThan,
            bundleFB._addedBlocks);
    _waitingNot = '';
    bundleFB._addedBlocks.needEndBlock[bundleFB._blockIndex] =
        bundleFB._addedBlocks.retVal;
    return bundleFB;
  }

  BundleFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    bundleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bundleFB.parameters, param,
            SqlSyntax.LessThanOrEquals, bundleFB._addedBlocks)
        : setCriteria(pValue, bundleFB.parameters, param, SqlSyntax.GreaterThan,
            bundleFB._addedBlocks);
    _waitingNot = '';
    bundleFB._addedBlocks.needEndBlock[bundleFB._blockIndex] =
        bundleFB._addedBlocks.retVal;
    return bundleFB;
  }

  BundleFilterBuilder inValues(dynamic pValue) {
    bundleFB._addedBlocks = setCriteria(
        pValue,
        bundleFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        bundleFB._addedBlocks);
    _waitingNot = '';
    bundleFB._addedBlocks.needEndBlock[bundleFB._blockIndex] =
        bundleFB._addedBlocks.retVal;
    return bundleFB;
  }
}
// endregion BundleField

// region BundleFilterBuilder
class BundleFilterBuilder extends SearchCriteria {
  BundleFilterBuilder(Bundle obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Bundle _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  BundleFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  BundleFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  BundleFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  BundleFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param =
          DbParameter(columnName: parameterValue == null ? null : '');
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  BundleFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  BundleFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  BundleFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  BundleFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  BundleFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  BundleFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  BundleField setField(BundleField field, String colName, DbType dbtype) {
    return BundleField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  BundleField _id;
  BundleField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  BundleField _name;
  BundleField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  BundleField _iconPath;
  BundleField get iconPath {
    return _iconPath = setField(_iconPath, 'iconPath', DbType.text);
  }

  BundleField _headerImagePath;
  BundleField get headerImagePath {
    return _headerImagePath =
        setField(_headerImagePath, 'headerImagePath', DbType.text);
  }

  BundleField _room;
  BundleField get room {
    return _room = setField(_room, 'room', DbType.integer);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Bundle._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Bundle> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    // Check sub records where in (Item) according to DeleteRule.NO_ACTION
    final itemsBybundleidList = await toListPrimaryKey(false);
    final resItemBYbundle =
        await Item().select().bundle.inValues(itemsBybundleidList).toCount();
    if (resItemBYbundle > 0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (Item.bundle)');
    }

    if (Bundle._softDeleteActivated && !hardDelete) {
      r = await _obj._mnBundle.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnBundle.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from bundles ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnBundle.updateBatch(qparams, values);
  }

  /// This method always returns Bundle Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Bundle>
  Future<Bundle> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnBundle.toList(qparams);
    final data = await objFuture;
    Bundle obj;
    if (data.isNotEmpty) {
      obj = Bundle.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('bundles.plItems') && */ (preloadFields ==
                null ||
            preloadFields.contains('plItems'))) {
          /*_loadedFields.add('bundles.plItems'); */
          obj.plItems = obj.plItems ??
              await obj.getItems().toList(
                  preload: preload,
                  preloadFields: preloadFields,
                  loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('rooms.plRoom') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plRoom'))) {
          /*_loadedFields.add('rooms.plRoom');*/
          obj.plRoom = obj.plRoom ??
              await obj.getRoom(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) bundleCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final bundlesFuture = await _obj._mnBundle.toList(qparams);
    final int count = bundlesFuture[0]['CNT'] as int;
    if (bundleCount != null) {
      bundleCount(count);
    }
    return count;
  }

  /// This method returns List<Bundle>.
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Bundle>
  Future<List<Bundle>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Bundle> bundlesData = await Bundle.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return bundlesData;
  }

  /// This method returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnBundle.toList(qparams);
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnBundle.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnBundle.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Bundle.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnBundle.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion BundleFilterBuilder

// region BundleFields
class BundleFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fIconPath;
  static TableField get iconPath {
    return _fIconPath =
        _fIconPath ?? SqlSyntax.setField(_fIconPath, 'iconPath', DbType.text);
  }

  static TableField _fHeaderImagePath;
  static TableField get headerImagePath {
    return _fHeaderImagePath = _fHeaderImagePath ??
        SqlSyntax.setField(_fHeaderImagePath, 'headerImagePath', DbType.text);
  }

  static TableField _fRoom;
  static TableField get room {
    return _fRoom =
        _fRoom ?? SqlSyntax.setField(_fRoom, 'room', DbType.integer);
  }
}
// endregion BundleFields

//region BundleManager
class BundleManager extends SqfEntityProvider {
  BundleManager()
      : super(DatabaseModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'bundles';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion BundleManager
// region Item
class Item {
  Item({this.id, this.name, this.iconPath, this.complete, this.bundle}) {
    _setDefaultValues();
  }
  Item.withFields(this.name, this.iconPath, this.complete, this.bundle) {
    _setDefaultValues();
  }
  Item.withId(this.id, this.name, this.iconPath, this.complete, this.bundle) {
    _setDefaultValues();
  }
  Item.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'] as String;
    }
    if (o['iconPath'] != null) {
      iconPath = o['iconPath'] as String;
    }
    if (o['complete'] != null) {
      complete = o['complete'] == 1 || o['complete'] == true;
    }
    bundle = int.tryParse(o['bundle'].toString());

    // RELATIONSHIPS FromMAP
    plBundle = o['plBundle'] != null
        ? Bundle.fromMap(o['plBundle'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Item)
  int id;
  String name;
  String iconPath;
  bool complete;
  int bundle;

  BoolResult saveResult;
  // end FIELDS (Item)

// RELATIONSHIPS (Item)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields. Ex: toList(preload:true, preloadFields:['plBundle', 'plField2'..]) or so on..
  Bundle plBundle;

  /// get Bundle By Bundle
  Future<Bundle> getBundle(
      {bool loadParents = false, List<String> loadedFields}) async {
    final _obj = await Bundle()
        .getById(bundle, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Item)

  static const bool _softDeleteActivated = false;
  ItemManager __mnItem;

  ItemManager get _mnItem {
    return __mnItem = __mnItem ?? ItemManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (iconPath != null) {
      map['iconPath'] = iconPath;
    }

    if (complete != null) {
      map['complete'] = forQuery ? (complete ? 1 : 0) : complete;
    }

    if (bundle != null) {
      map['bundle'] = forView ? plBundle.name : bundle;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (iconPath != null) {
      map['iconPath'] = iconPath;
    }

    if (complete != null) {
      map['complete'] = forQuery ? (complete ? 1 : 0) : complete;
    }

    if (bundle != null) {
      map['bundle'] = forView ? plBundle.name : bundle;
    }

    return map;
  }

  /// This method returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [name, iconPath, complete, bundle];
  }

  List<dynamic> toArgsWithIds() {
    return [id, name, iconPath, complete, bundle];
  }

  static Future<List<Item>> fromWeb(
      [VoidCallback Function(List<Item> o) itemList]) async {
    final objList = await fromWebUrl(
        'https://raw.githubusercontent.com/PikaPirate/stardew-valley-tracker/master/Items.json');
    if (itemList != null) {
      itemList(objList);
    }
    return objList;
  }

  static Future<List<Item>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Item.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Item>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Item>[];
    try {
      objList = list
          .map((item) => Item.fromMap(item as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Item.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Item>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Item> objList = <Item>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Item.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('bundles.plBundle') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBundle'))) {
          /*_loadedFields.add('bundles.plBundle');*/
          obj.plBundle = obj.plBundle ??
              await obj.getBundle(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Item by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Item if exist, otherwise returns null
  Future<Item> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Item obj;
    final data = await _mnItem.getById([id]);
    if (data.length != 0) {
      obj = Item.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('bundles.plBundle') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBundle'))) {
          /*_loadedFields.add('bundles.plBundle');*/
          obj.plBundle = obj.plBundle ??
              await obj.getBundle(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Item) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnItem.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnItem.update(this);
    }

    return id;
  }

  /// saveAs Item. Returns a new Primary Key value of Item

  /// <returns>Returns a new Primary Key value of Item
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Item> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  Future<List<dynamic>> saveAll(List<Item> items) async {
    // final results = _mnItem.saveAll('INSERT OR REPLACE INTO items (id,name, iconPath, complete, bundle)  VALUES (?,?,?,?,?)',items);
    // return results; removed in sqfentity_gen 1.3.0+6
    DatabaseModel().batchStart();
    for (final obj in items) {
      await obj.save();
    }
    return DatabaseModel().batchCommit();
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnItem.rawInsert(
              'INSERT OR REPLACE INTO items (id,name, iconPath, complete, bundle)  VALUES (?,?,?,?,?)',
              [id, name, iconPath, complete, bundle]) ==
          1) {
        saveResult = BoolResult(
            success: true, successMessage: 'Item id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Item id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Item Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Item>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Item> items) async {
    final results = await _mnItem.rawInsertAll(
        'INSERT OR REPLACE INTO items (id,name, iconPath, complete, bundle)  VALUES (?,?,?,?,?)',
        items);
    return results;
  }

  /// Deletes Item

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Item invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnItem
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnItem.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  ItemFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    return ItemFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  ItemFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return ItemFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    complete = complete ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion item

// region ItemField
class ItemField extends SearchCriteria {
  ItemField(this.itemFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  ItemFilterBuilder itemFB;

  ItemField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  ItemFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param, SqlSyntax.EQuals,
            itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param, SqlSyntax.NotEQuals,
            itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock[itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param, SqlSyntax.EQualsOrNull,
            itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock[itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder isNull() {
    itemFB._addedBlocks = setCriteria(
        0,
        itemFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock[itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      itemFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          itemFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          itemFB._addedBlocks);
      _waitingNot = '';
      itemFB._addedBlocks.needEndBlock[itemFB._blockIndex] =
          itemFB._addedBlocks.retVal;
    }
    return itemFB;
  }

  ItemFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      itemFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          itemFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          itemFB._addedBlocks);
      _waitingNot = '';
      itemFB._addedBlocks.needEndBlock[itemFB._blockIndex] =
          itemFB._addedBlocks.retVal;
      itemFB._addedBlocks.needEndBlock[itemFB._blockIndex] =
          itemFB._addedBlocks.retVal;
    }
    return itemFB;
  }

  ItemFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      itemFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          itemFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          itemFB._addedBlocks);
      _waitingNot = '';
      itemFB._addedBlocks.needEndBlock[itemFB._blockIndex] =
          itemFB._addedBlocks.retVal;
    }
    return itemFB;
  }

  ItemFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      itemFB._addedBlocks = setCriteria(
          pFirst,
          itemFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          itemFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        itemFB._addedBlocks = setCriteria(pFirst, itemFB.parameters, param,
            SqlSyntax.LessThan, itemFB._addedBlocks);
      } else {
        itemFB._addedBlocks = setCriteria(pFirst, itemFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, itemFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        itemFB._addedBlocks = setCriteria(pLast, itemFB.parameters, param,
            SqlSyntax.GreaterThan, itemFB._addedBlocks);
      } else {
        itemFB._addedBlocks = setCriteria(pLast, itemFB.parameters, param,
            SqlSyntax.LessThanOrEquals, itemFB._addedBlocks);
      }
    }
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock[itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param, SqlSyntax.GreaterThan,
            itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param,
            SqlSyntax.LessThanOrEquals, itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock[itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param, SqlSyntax.LessThan,
            itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock[itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param, SqlSyntax.LessThan,
            itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock[itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    itemFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, itemFB.parameters, param,
            SqlSyntax.LessThanOrEquals, itemFB._addedBlocks)
        : setCriteria(pValue, itemFB.parameters, param, SqlSyntax.GreaterThan,
            itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock[itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }

  ItemFilterBuilder inValues(dynamic pValue) {
    itemFB._addedBlocks = setCriteria(
        pValue,
        itemFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        itemFB._addedBlocks);
    _waitingNot = '';
    itemFB._addedBlocks.needEndBlock[itemFB._blockIndex] =
        itemFB._addedBlocks.retVal;
    return itemFB;
  }
}
// endregion ItemField

// region ItemFilterBuilder
class ItemFilterBuilder extends SearchCriteria {
  ItemFilterBuilder(Item obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Item _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  ItemFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  ItemFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  ItemFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  ItemFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param =
          DbParameter(columnName: parameterValue == null ? null : '');
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  ItemFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  ItemFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  ItemFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  ItemFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ItemFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  ItemFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  ItemField setField(ItemField field, String colName, DbType dbtype) {
    return ItemField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  ItemField _id;
  ItemField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  ItemField _name;
  ItemField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  ItemField _iconPath;
  ItemField get iconPath {
    return _iconPath = setField(_iconPath, 'iconPath', DbType.text);
  }

  ItemField _complete;
  ItemField get complete {
    return _complete = setField(_complete, 'complete', DbType.bool);
  }

  ItemField _bundle;
  ItemField get bundle {
    return _bundle = setField(_bundle, 'bundle', DbType.integer);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Item._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Item> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Item._softDeleteActivated && !hardDelete) {
      r = await _obj._mnItem.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnItem.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from items ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnItem.updateBatch(qparams, values);
  }

  /// This method always returns Item Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Item>
  Future<Item> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnItem.toList(qparams);
    final data = await objFuture;
    Item obj;
    if (data.isNotEmpty) {
      obj = Item.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedFields.contains('bundles.plBundle') && */ (preloadFields ==
                null ||
            loadParents ||
            preloadFields.contains('plBundle'))) {
          /*_loadedFields.add('bundles.plBundle');*/
          obj.plBundle = obj.plBundle ??
              await obj.getBundle(
                  loadParents: loadParents /*, loadedFields: _loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) itemCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final itemsFuture = await _obj._mnItem.toList(qparams);
    final int count = itemsFuture[0]['CNT'] as int;
    if (itemCount != null) {
      itemCount(count);
    }
    return count;
  }

  /// This method returns List<Item>.
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Item>
  Future<List<Item>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Item> itemsData = await Item.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return itemsData;
  }

  /// This method returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnItem.toList(qparams);
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnItem.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnItem.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Item.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnItem.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ItemFilterBuilder

// region ItemFields
class ItemFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fIconPath;
  static TableField get iconPath {
    return _fIconPath =
        _fIconPath ?? SqlSyntax.setField(_fIconPath, 'iconPath', DbType.text);
  }

  static TableField _fComplete;
  static TableField get complete {
    return _fComplete =
        _fComplete ?? SqlSyntax.setField(_fComplete, 'complete', DbType.bool);
  }

  static TableField _fBundle;
  static TableField get bundle {
    return _fBundle =
        _fBundle ?? SqlSyntax.setField(_fBundle, 'bundle', DbType.integer);
  }
}
// endregion ItemFields

//region ItemManager
class ItemManager extends SqfEntityProvider {
  ItemManager()
      : super(DatabaseModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'items';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion ItemManager
class DatabaseModelSequenceManager extends SqfEntityProvider {
  DatabaseModelSequenceManager() : super(DatabaseModel());
}
// END OF ENTITIES
